Nonterminals useless in grammar

    string


Terminals unused in grammar

    POW
    ROOT
    LOG
    COS
    SIN
    TAN
    FIB
    FACT
    BASE
    SUM
    PROD
    ABS
    MOD
    NEP
    PI
    RAND
    SIGMA
    ERA
    PRIME
    PRIMF
    GCD
    BC
    PN
    AVG
    CEIL
    FLOOR
    FOR
    INC
    DEC
    BIN
    ','


Grammar

    0 $accept: startProgram $end

    1 startProgram: op '\n'
    2             | startProgram op '\n'

    3 op: expression
    4   | type
    5   | expression SMALLER expression
    6   | block
    7   | EXIT

    8 block: WHILE '(' cond ')' op '\n'
    9      | IF '(' cond ')' op '\n'
   10      | IF '(' cond ')' op ELSE op '\n'

   11 type: INT
   12     | FLOAT
   13     | STRING

   14 cond: scond
   15     | scond logop cond

   16 scond: nid relop nid

   17 nid: ID
   18    | REAL

   19 logop: AND
   20      | OR

   21 relop: DIFFERENT
   22      | EQUAL
   23      | SMALLEREQUAL
   24      | SMALLER
   25      | GREATER
   26      | GREATEREQUAL

   27 expression: '(' expression ')'
   28           | expression '+' expression
   29           | REAL
   30           | INTEGER
   31           | expression '-' expression
   32           | expression '*' expression
   33           | expression '/' expression
   34           | expression '^' expression
   35           | expression '!'


Terminals, with rules where they appear

    $end (0) 0
    '\n' (10) 1 2 8 9 10
    '!' (33) 35
    '(' (40) 8 9 10 27
    ')' (41) 8 9 10 27
    '*' (42) 32
    '+' (43) 28
    ',' (44)
    '-' (45) 31
    '/' (47) 33
    '^' (94) 34
    error (256)
    INTEGER <intVal> (258) 30
    REAL <floatVal> (259) 18 29
    ID <lex> (260) 17
    POW (261)
    ROOT (262)
    LOG (263)
    COS (264)
    SIN (265)
    TAN (266)
    FIB (267)
    FACT (268)
    BASE (269)
    SUM (270)
    PROD (271)
    ABS (272)
    MOD (273)
    NEP (274)
    PI (275)
    SMALLER (276) 5 24
    GREATER (277) 25
    EQUAL (278) 22
    DIFFERENT (279) 21
    SMALLEREQUAL (280) 23
    GREATEREQUAL (281) 26
    RAND (282)
    SIGMA (283)
    ERA (284)
    PRIME (285)
    PRIMF (286)
    GCD (287)
    BC (288)
    PN (289)
    AVG (290)
    CEIL (291)
    FLOOR (292)
    FOR (293)
    WHILE (294) 8
    IF (295) 9 10
    ELSE (296) 10
    OR (297) 20
    INC (298)
    DEC (299)
    AND (300) 19
    EXIT (301) 7
    BIN (302)
    FLOAT (303) 12
    INT (304) 11
    STRING (305) 13


Nonterminals, with rules where they appear

    $accept (61)
        on left: 0
    startProgram (62)
        on left: 1 2
        on right: 0 2
    op (63)
        on left: 3 4 5 6 7
        on right: 1 2 8 9 10
    block (64)
        on left: 8 9 10
        on right: 6
    type <lex> (65)
        on left: 11 12 13
        on right: 4
    cond (66)
        on left: 14 15
        on right: 8 9 10 15
    scond (67)
        on left: 16
        on right: 14 15
    nid (68)
        on left: 17 18
        on right: 16
    logop (69)
        on left: 19 20
        on right: 15
    relop (70)
        on left: 21 22 23 24 25 26
        on right: 16
    expression <expr> (71)
        on left: 27 28 29 30 31 32 33 34 35
        on right: 3 5 27 28 31 32 33 34 35


State 0

    0 $accept: . startProgram $end

    INTEGER  shift, and go to state 1
    REAL     shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    EXIT     shift, and go to state 5
    FLOAT    shift, and go to state 6
    INT      shift, and go to state 7
    STRING   shift, and go to state 8
    '('      shift, and go to state 9

    startProgram  go to state 10
    op            go to state 11
    block         go to state 12
    type          go to state 13
    expression    go to state 14


State 1

   30 expression: INTEGER .

    $default  reduce using rule 30 (expression)


State 2

   29 expression: REAL .

    $default  reduce using rule 29 (expression)


State 3

    8 block: WHILE . '(' cond ')' op '\n'

    '('  shift, and go to state 15


State 4

    9 block: IF . '(' cond ')' op '\n'
   10      | IF . '(' cond ')' op ELSE op '\n'

    '('  shift, and go to state 16


State 5

    7 op: EXIT .

    $default  reduce using rule 7 (op)


State 6

   12 type: FLOAT .

    $default  reduce using rule 12 (type)


State 7

   11 type: INT .

    $default  reduce using rule 11 (type)


State 8

   13 type: STRING .

    $default  reduce using rule 13 (type)


State 9

   27 expression: '(' . expression ')'

    INTEGER  shift, and go to state 1
    REAL     shift, and go to state 2
    '('      shift, and go to state 9

    expression  go to state 17


State 10

    0 $accept: startProgram . $end
    2 startProgram: startProgram . op '\n'

    $end     shift, and go to state 18
    INTEGER  shift, and go to state 1
    REAL     shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    EXIT     shift, and go to state 5
    FLOAT    shift, and go to state 6
    INT      shift, and go to state 7
    STRING   shift, and go to state 8
    '('      shift, and go to state 9

    op          go to state 19
    block       go to state 12
    type        go to state 13
    expression  go to state 14


State 11

    1 startProgram: op . '\n'

    '\n'  shift, and go to state 20


State 12

    6 op: block .

    $default  reduce using rule 6 (op)


State 13

    4 op: type .

    $default  reduce using rule 4 (op)


State 14

    3 op: expression .
    5   | expression . SMALLER expression
   28 expression: expression . '+' expression
   31           | expression . '-' expression
   32           | expression . '*' expression
   33           | expression . '/' expression
   34           | expression . '^' expression
   35           | expression . '!'

    SMALLER  shift, and go to state 21
    '+'      shift, and go to state 22
    '-'      shift, and go to state 23
    '*'      shift, and go to state 24
    '/'      shift, and go to state 25
    '^'      shift, and go to state 26
    '!'      shift, and go to state 27

    $default  reduce using rule 3 (op)


State 15

    8 block: WHILE '(' . cond ')' op '\n'

    REAL  shift, and go to state 28
    ID    shift, and go to state 29

    cond   go to state 30
    scond  go to state 31
    nid    go to state 32


State 16

    9 block: IF '(' . cond ')' op '\n'
   10      | IF '(' . cond ')' op ELSE op '\n'

    REAL  shift, and go to state 28
    ID    shift, and go to state 29

    cond   go to state 33
    scond  go to state 31
    nid    go to state 32


State 17

   27 expression: '(' expression . ')'
   28           | expression . '+' expression
   31           | expression . '-' expression
   32           | expression . '*' expression
   33           | expression . '/' expression
   34           | expression . '^' expression
   35           | expression . '!'

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25
    '^'  shift, and go to state 26
    '!'  shift, and go to state 27
    ')'  shift, and go to state 34


State 18

    0 $accept: startProgram $end .

    $default  accept


State 19

    2 startProgram: startProgram op . '\n'

    '\n'  shift, and go to state 35


State 20

    1 startProgram: op '\n' .

    $default  reduce using rule 1 (startProgram)


State 21

    5 op: expression SMALLER . expression

    INTEGER  shift, and go to state 1
    REAL     shift, and go to state 2
    '('      shift, and go to state 9

    expression  go to state 36


State 22

   28 expression: expression '+' . expression

    INTEGER  shift, and go to state 1
    REAL     shift, and go to state 2
    '('      shift, and go to state 9

    expression  go to state 37


State 23

   31 expression: expression '-' . expression

    INTEGER  shift, and go to state 1
    REAL     shift, and go to state 2
    '('      shift, and go to state 9

    expression  go to state 38


State 24

   32 expression: expression '*' . expression

    INTEGER  shift, and go to state 1
    REAL     shift, and go to state 2
    '('      shift, and go to state 9

    expression  go to state 39


State 25

   33 expression: expression '/' . expression

    INTEGER  shift, and go to state 1
    REAL     shift, and go to state 2
    '('      shift, and go to state 9

    expression  go to state 40


State 26

   34 expression: expression '^' . expression

    INTEGER  shift, and go to state 1
    REAL     shift, and go to state 2
    '('      shift, and go to state 9

    expression  go to state 41


State 27

   35 expression: expression '!' .

    $default  reduce using rule 35 (expression)


State 28

   18 nid: REAL .

    $default  reduce using rule 18 (nid)


State 29

   17 nid: ID .

    $default  reduce using rule 17 (nid)


State 30

    8 block: WHILE '(' cond . ')' op '\n'

    ')'  shift, and go to state 42


State 31

   14 cond: scond .
   15     | scond . logop cond

    OR   shift, and go to state 43
    AND  shift, and go to state 44

    $default  reduce using rule 14 (cond)

    logop  go to state 45


State 32

   16 scond: nid . relop nid

    SMALLER       shift, and go to state 46
    GREATER       shift, and go to state 47
    EQUAL         shift, and go to state 48
    DIFFERENT     shift, and go to state 49
    SMALLEREQUAL  shift, and go to state 50
    GREATEREQUAL  shift, and go to state 51

    relop  go to state 52


State 33

    9 block: IF '(' cond . ')' op '\n'
   10      | IF '(' cond . ')' op ELSE op '\n'

    ')'  shift, and go to state 53


State 34

   27 expression: '(' expression ')' .

    $default  reduce using rule 27 (expression)


State 35

    2 startProgram: startProgram op '\n' .

    $default  reduce using rule 2 (startProgram)


State 36

    5 op: expression SMALLER expression .
   28 expression: expression . '+' expression
   31           | expression . '-' expression
   32           | expression . '*' expression
   33           | expression . '/' expression
   34           | expression . '^' expression
   35           | expression . '!'

    '+'  shift, and go to state 22
    '-'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25
    '^'  shift, and go to state 26
    '!'  shift, and go to state 27

    $default  reduce using rule 5 (op)


State 37

   28 expression: expression . '+' expression
   28           | expression '+' expression .
   31           | expression . '-' expression
   32           | expression . '*' expression
   33           | expression . '/' expression
   34           | expression . '^' expression
   35           | expression . '!'

    '-'  shift, and go to state 23
    '*'  shift, and go to state 24
    '/'  shift, and go to state 25
    '^'  shift, and go to state 26
    '!'  shift, and go to state 27

    $default  reduce using rule 28 (expression)


State 38

   28 expression: expression . '+' expression
   31           | expression . '-' expression
   31           | expression '-' expression .
   32           | expression . '*' expression
   33           | expression . '/' expression
   34           | expression . '^' expression
   35           | expression . '!'

    '*'  shift, and go to state 24
    '/'  shift, and go to state 25
    '^'  shift, and go to state 26
    '!'  shift, and go to state 27

    $default  reduce using rule 31 (expression)


State 39

   28 expression: expression . '+' expression
   31           | expression . '-' expression
   32           | expression . '*' expression
   32           | expression '*' expression .
   33           | expression . '/' expression
   34           | expression . '^' expression
   35           | expression . '!'

    '/'  shift, and go to state 25
    '^'  shift, and go to state 26
    '!'  shift, and go to state 27

    $default  reduce using rule 32 (expression)


State 40

   28 expression: expression . '+' expression
   31           | expression . '-' expression
   32           | expression . '*' expression
   33           | expression . '/' expression
   33           | expression '/' expression .
   34           | expression . '^' expression
   35           | expression . '!'

    '^'  shift, and go to state 26
    '!'  shift, and go to state 27

    $default  reduce using rule 33 (expression)


State 41

   28 expression: expression . '+' expression
   31           | expression . '-' expression
   32           | expression . '*' expression
   33           | expression . '/' expression
   34           | expression . '^' expression
   34           | expression '^' expression .
   35           | expression . '!'

    '!'  shift, and go to state 27

    $default  reduce using rule 34 (expression)


State 42

    8 block: WHILE '(' cond ')' . op '\n'

    INTEGER  shift, and go to state 1
    REAL     shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    EXIT     shift, and go to state 5
    FLOAT    shift, and go to state 6
    INT      shift, and go to state 7
    STRING   shift, and go to state 8
    '('      shift, and go to state 9

    op          go to state 54
    block       go to state 12
    type        go to state 13
    expression  go to state 14


State 43

   20 logop: OR .

    $default  reduce using rule 20 (logop)


State 44

   19 logop: AND .

    $default  reduce using rule 19 (logop)


State 45

   15 cond: scond logop . cond

    REAL  shift, and go to state 28
    ID    shift, and go to state 29

    cond   go to state 55
    scond  go to state 31
    nid    go to state 32


State 46

   24 relop: SMALLER .

    $default  reduce using rule 24 (relop)


State 47

   25 relop: GREATER .

    $default  reduce using rule 25 (relop)


State 48

   22 relop: EQUAL .

    $default  reduce using rule 22 (relop)


State 49

   21 relop: DIFFERENT .

    $default  reduce using rule 21 (relop)


State 50

   23 relop: SMALLEREQUAL .

    $default  reduce using rule 23 (relop)


State 51

   26 relop: GREATEREQUAL .

    $default  reduce using rule 26 (relop)


State 52

   16 scond: nid relop . nid

    REAL  shift, and go to state 28
    ID    shift, and go to state 29

    nid  go to state 56


State 53

    9 block: IF '(' cond ')' . op '\n'
   10      | IF '(' cond ')' . op ELSE op '\n'

    INTEGER  shift, and go to state 1
    REAL     shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    EXIT     shift, and go to state 5
    FLOAT    shift, and go to state 6
    INT      shift, and go to state 7
    STRING   shift, and go to state 8
    '('      shift, and go to state 9

    op          go to state 57
    block       go to state 12
    type        go to state 13
    expression  go to state 14


State 54

    8 block: WHILE '(' cond ')' op . '\n'

    '\n'  shift, and go to state 58


State 55

   15 cond: scond logop cond .

    $default  reduce using rule 15 (cond)


State 56

   16 scond: nid relop nid .

    $default  reduce using rule 16 (scond)


State 57

    9 block: IF '(' cond ')' op . '\n'
   10      | IF '(' cond ')' op . ELSE op '\n'

    ELSE  shift, and go to state 59
    '\n'  shift, and go to state 60


State 58

    8 block: WHILE '(' cond ')' op '\n' .

    $default  reduce using rule 8 (block)


State 59

   10 block: IF '(' cond ')' op ELSE . op '\n'

    INTEGER  shift, and go to state 1
    REAL     shift, and go to state 2
    WHILE    shift, and go to state 3
    IF       shift, and go to state 4
    EXIT     shift, and go to state 5
    FLOAT    shift, and go to state 6
    INT      shift, and go to state 7
    STRING   shift, and go to state 8
    '('      shift, and go to state 9

    op          go to state 61
    block       go to state 12
    type        go to state 13
    expression  go to state 14


State 60

    9 block: IF '(' cond ')' op '\n' .

    $default  reduce using rule 9 (block)


State 61

   10 block: IF '(' cond ')' op ELSE op . '\n'

    '\n'  shift, and go to state 62


State 62

   10 block: IF '(' cond ')' op ELSE op '\n' .

    $default  reduce using rule 10 (block)
